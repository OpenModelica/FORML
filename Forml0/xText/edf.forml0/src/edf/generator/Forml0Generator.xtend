/*
 * generated by Xtext 2.22.0
 */
package edf.generator

import edf.forml0.Model
import edf.forml0.Item
import edf.forml0.Boolean
import edf.forml0.Integer
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import edf.forml0.Real
import edf.forml0.Event
import edf.forml0.Property
import edf.forml0.Ctl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Forml0Generator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.toIterable.filter(Model).forEach [		
			fsa.generateFile('''Bracketed.«resource.URI.lastSegment»''', generateModel)
		]
	}
 
	def generateModel (Model model) {
		'''
		«FOR item : model.items»
		«IF item.^boolean !== null»«item.^boolean.textFor» ; «ENDIF»
		«IF item.integer  !== null»«item.integer .textFor» ; «ENDIF»
		«IF item.real     !== null»«item.real    .textFor» ; «ENDIF»
		«IF item.event    !== null»«item.event   .textFor» ; «ENDIF»
		«IF item.property !== null»«item.property.textFor» ; «ENDIF»
		«IF item.ctl      !== null»«item.ctl     .textFor» ; «ENDIF»
		«ENDFOR»
		'''
	}

 
	def dispatch textFor (Boolean item) {
		'''Boolean : «item.type» «item.name» ;
		'''
	}
	
	def dispatch textFor (Integer item) {
		'''Integer : «item.type» «item.name» ;
		'''
	}
	
	def dispatch textFor (Real item) {
		'''Real : «item.type» «item.name» ;
		'''
	}
	
	def dispatch textFor (Event item) {
		'''Event : «item.type» «item.name» ;
		'''
	}
	
	def dispatch textFor (Property item) {
		'''Property : «item.type» «item.name» ;
		'''
	}
	
	def dispatch textFor (Ctl item) {
		'''Ctl : «item.type» «item.name» ;
		'''
	}
	
}


